from falcor import *

def render_graph_ForwardRenderer():
    g = RenderGraph('ForwardRenderer')
    loadRenderPassLibrary('DLSSPass.dll')
    loadRenderPassLibrary('BSDFViewer.dll')
    loadRenderPassLibrary('ML_HBAOInterleaved.dll')
    loadRenderPassLibrary('AccumulatePass.dll')
    loadRenderPassLibrary('TemporalDelayPass.dll')
    loadRenderPassLibrary('RTXDIPass.dll')
    loadRenderPassLibrary('Antialiasing.dll')
    loadRenderPassLibrary('BlitPass.dll')
    loadRenderPassLibrary('HBAOPlusNonInterleaved.dll')
    loadRenderPassLibrary('ConvertFormat.dll')
    loadRenderPassLibrary('WriteStencil.dll')
    loadRenderPassLibrary('CrossBilateralBlur.dll')
    loadRenderPassLibrary('CSM.dll')
    loadRenderPassLibrary('DebugPasses.dll')
    loadRenderPassLibrary('DeinterleaveTexture.dll')
    loadRenderPassLibrary('ML_HBAO.dll')
    loadRenderPassLibrary('DepthPass.dll')
    loadRenderPassLibrary('SkyBox.dll')
    loadRenderPassLibrary('DepthPeelPass.dll')
    loadRenderPassLibrary('DualDepthPass.dll')
    loadRenderPassLibrary('ErrorMeasurePass.dll')
    loadRenderPassLibrary('FLIPPass.dll')
    loadRenderPassLibrary('WhittedRayTracer.dll')
    loadRenderPassLibrary('RTVAO.dll')
    loadRenderPassLibrary('ForwardLightingPass.dll')
    loadRenderPassLibrary('GBuffer.dll')
    loadRenderPassLibrary('HBAOPlus.dll')
    loadRenderPassLibrary('ImageLoader.dll')
    loadRenderPassLibrary('InterleaveTexture.dll')
    loadRenderPassLibrary('ML_VAORecorder.dll')
    loadRenderPassLibrary('LinearizeDepth.dll')
    loadRenderPassLibrary('MaterialDoubleSided.dll')
    loadRenderPassLibrary('PathRecorder.dll')
    loadRenderPassLibrary('MegakernelPathTracer.dll')
    loadRenderPassLibrary('NRDPass.dll')
    loadRenderPassLibrary('MinimalPathTracer.dll')
    loadRenderPassLibrary('ML_VAO.dll')
    loadRenderPassLibrary('ModulateIllumination.dll')
    loadRenderPassLibrary('NVIDIADenoiser.dll')
    loadRenderPassLibrary('OptixDenoiser.dll')
    loadRenderPassLibrary('PassLibraryTemplate.dll')
    loadRenderPassLibrary('VAO.dll')
    loadRenderPassLibrary('PathTracer.dll')
    loadRenderPassLibrary('PixelInspectorPass.dll')
    loadRenderPassLibrary('RayFilter.dll')
    loadRenderPassLibrary('RaytracedShadow.dll')
    loadRenderPassLibrary('RTAO.dll')
    loadRenderPassLibrary('RTAODenoiser.dll')
    loadRenderPassLibrary('SimpleSSAO.dll')
    loadRenderPassLibrary('RTHBAO.dll')
    loadRenderPassLibrary('SceneDebugger.dll')
    loadRenderPassLibrary('SimplePostFX.dll')
    loadRenderPassLibrary('StochasticDepthMap.dll')
    loadRenderPassLibrary('SVAO.dll')
    loadRenderPassLibrary('TestPasses.dll')
    loadRenderPassLibrary('SVGFPass.dll')
    loadRenderPassLibrary('Texture2DArrayExtract.dll')
    loadRenderPassLibrary('ToneMapper.dll')
    loadRenderPassLibrary('Utils.dll')
    DepthPrePass = createPass('DepthPass', {'depthFormat': ResourceFormat.D32Float, 'useAlphaTest': True, 'cullMode': CullMode.CullBack})
    g.addPass(DepthPrePass, 'DepthPrePass')
    LightingPass = createPass('ForwardLightingPass', {'sampleCount': 1, 'enableSuperSampling': False, 'envScale': 1.0})
    g.addPass(LightingPass, 'LightingPass')
    ShadowPass = createPass('RaytracedShadow')
    g.addPass(ShadowPass, 'ShadowPass')
    BlitPass = createPass('BlitPass', {'filter': SamplerFilter.Linear})
    g.addPass(BlitPass, 'BlitPass')
    ToneMapping = createPass('ToneMapper', {'outputSize': IOSize.Default, 'useSceneMetadata': True, 'exposureCompensation': -1.100000023841858, 'autoExposure': False, 'filmSpeed': 100.0, 'whiteBalance': False, 'whitePoint': 6500.0, 'operator': ToneMapOp.Aces, 'clamp': True, 'whiteMaxLuminance': 1.0, 'whiteScale': 11.199999809265137, 'fNumber': 1.0, 'shutter': 1.0, 'exposureMode': ExposureMode.AperturePriority})
    g.addPass(ToneMapping, 'ToneMapping')
    FXAA = createPass('FXAA', {'qualitySubPix': 0.75, 'qualityEdgeThreshold': 0.16599999368190765, 'qualityEdgeThresholdMin': 0.08330000191926956, 'earlyOut': True})
    g.addPass(FXAA, 'FXAA')
    SkyBox = createPass('SkyBox', {'texName': '', 'loadAsSrgb': True, 'filter': SamplerFilter.Linear})
    g.addPass(SkyBox, 'SkyBox')
    GBufferRaster = createPass('GBufferRaster', {'outputSize': IOSize.Default, 'samplePattern': SamplePattern.Center, 'sampleCount': 16, 'useAlphaTest': True, 'adjustShadingNormals': True, 'forceCullMode': False, 'cull': CullMode.CullBack})
    g.addPass(GBufferRaster, 'GBufferRaster')
    SVAO = createPass('SVAO', {'radius': 0.5, 'primaryDepthMode': DepthMode.SingleDepth, 'secondaryDepthMode': DepthMode.Raytraced, 'exponent': 4.0, 'rayPipeline': True, 'guardBand': 64, 'thickness': 0.0})
    g.addPass(SVAO, 'SVAO')
    DepthPeelPass = createPass('DepthPeelPass')
    g.addPass(DepthPeelPass, 'DepthPeelPass')
    LinearizeDepth = createPass('LinearizeDepth', {'depthFormat': ResourceFormat.R32Float})
    g.addPass(LinearizeDepth, 'LinearizeDepth')
    LinearizeDepth0 = createPass('LinearizeDepth', {'depthFormat': ResourceFormat.R32Float})
    g.addPass(LinearizeDepth0, 'LinearizeDepth0')
    MaterialDoubleSided = createPass('MaterialDoubleSided')
    g.addPass(MaterialDoubleSided, 'MaterialDoubleSided')
    CrossBilateralBlur = createPass('CrossBilateralBlur', {'guardBand': 64})
    g.addPass(CrossBilateralBlur, 'CrossBilateralBlur')
    ConvertFormat = createPass('ConvertFormat', {'formula': 'I0[xy].r * I1[xy]', 'format': ResourceFormat.RGBA32Float})
    g.addPass(ConvertFormat, 'ConvertFormat')
    g.addEdge('DepthPrePass.depth', 'SkyBox.depth')
    g.addEdge('SkyBox.target', 'LightingPass.color')
    g.addEdge('DepthPrePass.depth', 'LightingPass.depth')
    g.addEdge('ShadowPass.visibility', 'LightingPass.visibilityBuffer')
    g.addEdge('ToneMapping.dst', 'FXAA.src')
    g.addEdge('FXAA.dst', 'BlitPass.src')
    g.addEdge('DepthPrePass.depth', 'GBufferRaster.depth')
    g.addEdge('GBufferRaster.posW', 'ShadowPass.posW')
    g.addEdge('GBufferRaster.faceNormalW', 'SVAO.normals')
    g.addEdge('DepthPrePass.depth', 'SVAO.gbufferDepth')
    g.addEdge('DepthPrePass.depth', 'DepthPeelPass.depth')
    g.addEdge('DepthPrePass.depth', 'LinearizeDepth.depth')
    g.addEdge('LinearizeDepth.linearDepth', 'SVAO.depth')
    g.addEdge('DepthPeelPass.depth2', 'LinearizeDepth0.depth')
    g.addEdge('LinearizeDepth0.linearDepth', 'SVAO.depth2')
    g.addEdge('MaterialDoubleSided.doubleSided', 'SVAO.doubleSided')
    g.addEdge('GBufferRaster.mtlData', 'MaterialDoubleSided.mtlData')
    g.addEdge('SVAO.ao', 'CrossBilateralBlur.color')
    g.addEdge('LinearizeDepth.linearDepth', 'CrossBilateralBlur.linear depth')
    g.addEdge('CrossBilateralBlur.color', 'ConvertFormat.I0')
    g.addEdge('LightingPass.color', 'ConvertFormat.I1')
    g.addEdge('ConvertFormat.out', 'ToneMapping.src')
    g.markOutput('BlitPass.dst')
    g.markOutput('SVAO.stencil')
    g.markOutput('CrossBilateralBlur.color')
    return g

ForwardRenderer = render_graph_ForwardRenderer()
try: m.addGraph(ForwardRenderer)
except NameError: None
